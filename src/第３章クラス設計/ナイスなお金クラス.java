package 第３章クラス設計;

import java.util.Currency;

public class ナイスなお金クラス {
//	int amount;	//金額値
//	Currency currency; //通貨単位

	/** ↑↑のようなデータだけのクラスの問題点
	①重複コード：金額を加工する似たようなメソッドを、いろんな人がいろんなところに作ってしまう
	②修正漏れ：①の結果、修正が入った時に修正漏れが発生しやすい
	③可読性低下：金額関連のコードがバラバラなことで、関連するコードを探すのが一苦労
	④未初期化状態(生煮えコード)：データクラスを使う側は、インスタンス変数を初期化しないと使えない
	⑤不正値の混入：マイナスなどのありえない値が入ってしまう
	⑥思わぬ副作用：変数が可変だと、いつ変更されたのか、今はどんな値なのかをいちいち気にしないといけない
	⑦値の渡し間違い：金額値に間違って数量を入れてしまう…なんてこともあるかもしれない
	これを以下で改良していく
	*/

	//①重複コード②修正漏れ③可読性低下：金額関連のデータや処理をまとめる(=カプセル化)事で高凝集なコードに
	
	//⑥思わぬ副作用：不変にすることで値が変更されたかどうか気にしなくて良くなる
	final int 金額値;	//金額値
	final Currency 通貨単位; //通貨単位

	//③可読性低下：引数は、意味的に不変の扱いでいい。引数の値が変わるとコード追うのが難しくなる
	//　変数に複数の意味を持たせると不幸の始まり。変数１つに意味は１つ！
	public ナイスなお金クラス(final int 引数_金額, final Currency 引数_通貨単位) {
		// ⑤不正値の混入：バリデーション(=ガード節)を設ける
		//引数のバリデーション
		if(引数_金額<0) {
			throw new IllegalArgumentException("金額が不正です");
		}
		if(引数_通貨単位 == null) {
			throw new NullPointerException("通貨単位がnullです");
		}
		
		//④未初期化状態：ちゃんと初期値を設定する
		this.金額値 = 引数_金額;
		this.通貨単位 = 引数_通貨単位;
	}
	
	//⑦値の渡し間違い：参照型を渡すことで、コンパイル時に渡す値チェックができるようにする
	//　intなどのプリミティブ型だと、数量など、引数の意味は違うけどデータ型は一緒の値を渡せてしまう
	public ナイスなお金クラス add(final ナイスなお金クラス 引数_お金インスタンス) {

		// ⑤不正値の混入：バリデーション(=ガード節)を設ける
		if(引数_お金インスタンス.金額値<0) {
			throw new IllegalArgumentException("金額が不正です");
		}
		if(!this.通貨単位.equals(引数_お金インスタンス.通貨単位)) {
			throw new IllegalArgumentException("通貨単位が異なります");
		}
		
		final int addAmount = this.金額値 + 引数_お金インスタンス.金額値;
		//⑥思わぬ副作用:値を変更するときは、新しいインスタンスを渡せば既存インスタンスの値は変えずに変更した値を返せる
		return new ナイスなお金クラス(addAmount, this.通貨単位);
	}
}
